-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Solr query EDSL
--   
--   A typed Solr query EDSL.
@package solr-query
@version 0.4.0

module Solr.Query
class (Coercible query Builder, Default (LocalParams query)) => Query query where data LocalParams query :: * where {
    data family LocalParams query :: *;
}

-- | This clause <a>should</a> occur.
should :: Query query => query -> query

-- | This clause <a>must</a> occur.
must :: Query query => query -> query

-- | This clause <a>must not</a> occur.
mustNot :: Query query => query -> query

-- | This clause <a>must</a> occur, but it does not participate in scoring.
filt :: Query query => query -> query

-- | <a>SomeQuery</a> is a simple wrapper around a <a>Query</a> that
--   enables composition through its <a>Monoid</a> instance.
--   
--   It has no <a>LocalParams</a> of its own - you can only create them
--   with <a>def</a>.
data SomeQuery

-- | Create a <a>SomeQuery</a> from a <a>Query</a> and its
--   <a>LocalParams</a>.
someQuery :: Query query => LocalParams query -> query -> SomeQuery

-- | Compile a list of <a>Param</a> to a lazy <a>Text</a>.
compile :: [Param] -> Text

-- | A query parameter.
data Param

-- | The <tt>'fl'</tt> query parameter.
fl :: Text -> Param

-- | The <tt>'fq'</tt> query parameter.
fq :: Query query => FilterParams query -> query -> Param

-- | The <tt>'q'</tt> query parameter.
q :: Query query => LocalParams query -> query -> Param

-- | The <tt>'rows'</tt> query parameter.
rows :: Int -> Param

-- | The <tt>'sort'</tt> query parameter (ascending).
sortAsc :: Text -> Param

-- | The <tt>'sort'</tt> query parameter (descending).
sortDesc :: Text -> Param

-- | The <tt>'start'</tt> query parameter.
start :: Int -> Param

-- | <a>&amp;</a> is a reverse application operator. This provides
--   notational convenience. Its precedence is one higher than that of the
--   forward application operator <a>$</a>, which allows <a>&amp;</a> to be
--   nested in <a>$</a>.
(&) :: a -> (a -> b) -> b
infixl 1 &

-- | The default value for this type.
def :: Default a => a

module Solr.Query.Filter
data FilterParams query

-- | The <tt>'df'</tt> local parameter.
cache :: Bool -> FilterParams query -> FilterParams query

-- | The <tt>'df'</tt> local parameter.
cost :: Int -> FilterParams query -> FilterParams query

-- | <a>LocalParams</a> of the inner <a>Query</a>.
locals :: LocalParams query -> FilterParams query -> FilterParams query

module Solr.Query.Geofilt
data GeofiltQuery
type Latitude = Double
type Longitude = Double

-- | The <tt>'d'</tt> local parameter.
d :: Double -> LocalParams GeofiltQuery -> LocalParams GeofiltQuery

-- | The <tt>'pt'</tt> local parameter.
pt :: Latitude -> Longitude -> LocalParams GeofiltQuery -> LocalParams GeofiltQuery

-- | The <tt>'sfield'</tt> local parameter.
sfield :: Text -> LocalParams GeofiltQuery -> LocalParams GeofiltQuery
instance Data.Default.Class.Default Solr.Query.Geofilt.GeofiltQuery
instance Solr.Query.Internal.Query Solr.Query.Geofilt.GeofiltQuery
instance Data.Default.Class.Default (Solr.Query.Internal.LocalParams Solr.Query.Geofilt.GeofiltQuery)

module Solr.Query.Lucene
data LuceneQuery

-- | A default field query.
defaultField :: LuceneExpr ty -> LuceneQuery

-- | A field query.
(=:) :: Text -> LuceneExpr ty -> LuceneQuery
infix 7 =:

-- | Named version of (<a>=:</a>).
field :: Text -> LuceneExpr ty -> LuceneQuery

-- | The <tt>'^='</tt> constant score operator.
--   
--   This is given right-fixity to reject queries like <tt>q ^= 1 ^=
--   2</tt>.
(^=:) :: LuceneQuery -> Float -> LuceneQuery
infixr 6 ^=:

-- | Named version of (<a>^=:</a>).
score :: LuceneQuery -> Float -> LuceneQuery
infixr 6 `score`

-- | A <tt>lucene</tt> expression.
data LuceneExpr (t :: LuceneExprTy)

-- | An <tt>int</tt> expression.
int :: Int64 -> LuceneExpr TNum

-- | A <tt>float</tt> expression.
float :: Double -> LuceneExpr TNum

-- | A <tt>true</tt> expression.
true :: LuceneExpr TBool

-- | A <tt>false</tt> expression.
false :: LuceneExpr TBool

-- | A single word. Must <i>not</i> contain any spaces, wildcard characters
--   (<tt>'?'</tt> and <tt>'*'</tt>), or tildes (<tt>'~'</tt>), though this
--   is not enforced by the type system.
--   
--   Note that sometimes you may use the <a>IsString</a> instance for
--   <a>LuceneExpr</a> <a>TWord</a>, but usually an explicit type signature
--   will be required (at the interpretation site or earlier).
word :: Text -> LuceneExpr TWord

-- | A single word that may contain wildcard characters (<tt>'?'</tt> and
--   <tt>'*'</tt>), although the meaning of consecutive <tt>'*'</tt>s is
--   probably ill-defined. Must also <i>not</i> contain any spaces or
--   tildes (<tt>'~'</tt>), though this is not enforced by the type system.
wild :: Text -> LuceneExpr TWild

-- | A <a>regular expression</a>.
--   
--   Note that the leading and trailing <tt>'/'</tt> must be omitted. The
--   regex innards are not type checked in any way.
regex :: Text -> LuceneExpr TRegex

-- | A phrase, composed of multiple (non-fuzzy) words, none of which may
--   contain wildcard characters. Both of these properties are enforced by
--   the type system, as long as the words themselves adhere to the
--   <a>word</a> contract. The list should not be empty.
phrase :: [LuceneExpr TWord] -> LuceneExpr TPhrase

-- | A <a>DateTime</a> expression. This may either be a timestamp
--   (<a>UTCTime</a>), or a "truncated" <a>DateTime</a> such as <tt>(2015,
--   5, 12)</tt>.
datetime :: IsDateTime a => a -> LuceneExpr TDateTime

-- | <a>DateTime</a> literals. <a>DateTime</a> expressions are constructed
--   using the internal <a>IsDateTime</a> typeclass, for which there exist
--   the following instances:
--   
--   <pre>
--   instance <a>IsDateTime</a> <a>UTCTime</a>
--   instance <a>IsDateTime</a> <a>Year</a>
--   instance <a>IsDateTime</a> (<a>Year</a>, <a>Month</a>)
--   instance <a>IsDateTime</a> (<a>Year</a>, <a>Month</a>, <a>Day</a>)
--   instance <a>IsDateTime</a> (<a>Year</a>, <a>Month</a>, <a>Day</a>, <a>Hour</a>)
--   instance <a>IsDateTime</a> (<a>Year</a>, <a>Month</a>, <a>Day</a>, <a>Hour</a>, <a>Minute</a>)
--   instance <a>IsDateTime</a> (<a>Year</a>, <a>Month</a>, <a>Day</a>, <a>Hour</a>, <a>Minute</a>, <a>Second</a>)
--   instance <a>IsDateTime</a> (<a>Year</a>, <a>Month</a>, <a>Day</a>, <a>Hour</a>, <a>Minute</a>, <a>Second</a>, <a>Millisecond</a>)
--   </pre>
data DateTime

-- | Year.
type Year = Int

-- | <tt>1</tt>-indexed month. Clamped to the range <tt>1-12</tt>.
type Month = Int

-- | <tt>1</tt>-indexed day. Clamped to the range <tt>1-31</tt>.
type Day = Int

-- | Hour. Clamped to the range <tt>0-23</tt>.
type Hour = Int

-- | Minute. Clamped to the range <tt>0-59</tt>.
type Minute = Int

-- | Second. Clamped to the range <tt>0-60</tt>.
type Second = Int

-- | Millisecond. Clamped to the range <tt>0-99.999</tt>.
type Millisecond = Double

-- | The <tt>'~'</tt> operator, which fuzzes its argument (either a word or
--   phrase) by a numeric amount.
(~:) :: Fuzzable a => LuceneExpr a -> Int -> LuceneExpr TFuzzy
infix 9 ~:

-- | Named version of (<a>~:</a>).
fuzz :: Fuzzable a => LuceneExpr a -> Int -> LuceneExpr TFuzzy

-- | Short-hand for fuzzing a word by 2. This is the default behavior of a
--   Solr <tt>'~'</tt> operator without an integer added.
--   
--   <pre>
--   <a>fuzzy</a> e = e <a>~:</a> 2
--   </pre>
fuzzy :: LuceneExpr TWord -> LuceneExpr TFuzzy

-- | The <tt>'^'</tt> operator, which boosts its argument.
(^:) :: Boostable a => LuceneExpr a -> Float -> LuceneExpr TBoosted
infix 9 ^:

-- | Named version of (<a>^:</a>).
boost :: Boostable a => LuceneExpr a -> Float -> LuceneExpr TBoosted

-- | A range expression.
to :: Rangeable a b => Boundary a -> Boundary b -> LuceneExpr TRange
infix 9 `to`

-- | Short-hand for a greater-than range query.
--   
--   <pre>
--   <a>gt</a> e = <a>excl</a> e `to` <a>star</a>
--   </pre>
gt :: Rangeable a TAny => LuceneExpr a -> LuceneExpr TRange

-- | Short-hand for a greater-than-or-equal-to range query.
--   
--   <pre>
--   <a>gte</a> e = <a>incl</a> e `to` <a>star</a>
--   </pre>
gte :: Rangeable a TAny => LuceneExpr a -> LuceneExpr TRange

-- | Short-hand for a less-than range query.
--   
--   <pre>
--   <a>lt</a> e = <a>star</a> `to` <a>excl</a> e
--   </pre>
lt :: Rangeable TAny a => LuceneExpr a -> LuceneExpr TRange

-- | Short-hand for a less-than-or-equal-to range query.
--   
--   <pre>
--   <a>lte</a> e = <a>star</a> `to` <a>incl</a> e
--   </pre>
lte :: Rangeable TAny a => LuceneExpr a -> LuceneExpr TRange

-- | An inclusive or exclusive expression for use in a range query, built
--   with either <a>incl</a>, <a>excl</a>, or <a>star</a>.
--   
--   The constructors are exported for use in interpreters.
data Boundary ty

-- | Mark an expression as inclusive, for use in a range query.
incl :: LuceneExpr a -> Boundary a

-- | Mark an expression as exclusive, for use in a range query.
excl :: LuceneExpr a -> Boundary a

-- | <tt>'*'</tt> operator, signifying the minimum or maximun bound of a
--   range.
star :: Boundary TAny

-- | <tt>'Intersects'</tt> spatial predicate.
intersects :: Shape -> LuceneExpr TSpatialPredicate

-- | <tt>'IsWithin'</tt> spatial predicate.
isWithin :: Shape -> LuceneExpr TSpatialPredicate

-- | A shape.
data Shape

-- | A <tt>POLYGON</tt> shape.
polygon :: [(Double, Double)] -> Shape
data LuceneExprTy
TAny :: LuceneExprTy
TNum :: LuceneExprTy
TBool :: LuceneExprTy
TWord :: LuceneExprTy
TWild :: LuceneExprTy
TRegex :: LuceneExprTy
TPhrase :: LuceneExprTy
TDateTime :: LuceneExprTy
TFuzzy :: LuceneExprTy
TBoosted :: LuceneExprTy
TRange :: LuceneExprTy
TSpatialPredicate :: LuceneExprTy

-- | <tt>word</tt>s and <tt>phrase</tt>s can fuzzed by the <tt>~:</tt>
--   operator.
class Fuzzable (ty :: LuceneExprTy)

-- | <tt>word</tt>s and <tt>phrase</tt>s can be boosted by the <tt>^:</tt>
--   operator.
class Boostable (ty :: LuceneExprTy)

-- | <tt>int</tt>s, <tt>float</tt>s, <tt>word</tt>s, and <tt>datetime</tt>s
--   can <tt>to</tt> range expression.
class Rangeable (a :: LuceneExprTy) (b :: LuceneExprTy)

-- | The <tt>'df'</tt> local parameter.
df :: Text -> LocalParams LuceneQuery -> LocalParams LuceneQuery

-- | The <tt>'op=AND'</tt> local parameter.
opAnd :: LocalParams LuceneQuery -> LocalParams LuceneQuery

-- | The <tt>'op=OR'</tt> local parameter.
opOr :: LocalParams LuceneQuery -> LocalParams LuceneQuery

-- | This is the simplest representation of UTC. It consists of the day
--   number, and a time offset from midnight. Note that if a day has a leap
--   second added to it, it will have 86401 seconds.
data UTCTime :: *
instance GHC.Base.Monoid Solr.Query.Lucene.LuceneQuery
instance Solr.Query.Internal.Query Solr.Query.Lucene.LuceneQuery
instance Data.Default.Class.Default (Solr.Query.Internal.LocalParams Solr.Query.Lucene.LuceneQuery)
